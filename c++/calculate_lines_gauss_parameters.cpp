///////////////////////////////////////////////////////////////////////////////
// File generated by HDevelop for HALCON/C++ Version 13.0.2.2
///////////////////////////////////////////////////////////////////////////////




#ifndef __APPLE__
#  include "HalconCpp.h"
#  include "HDevThread.h"
#else
#  ifndef HC_LARGE_IMAGES
#    include <HALCONCpp/HalconCpp.h>
#    include <HALCONCpp/HDevThread.h>
#  else
#    include <HALCONCppxl/HalconCpp.h>
#    include <HALCONCppxl/HDevThread.h>
#  endif
#endif



using namespace HalconCpp;


// Chapter: Filters / Lines
// Short Description: Calculates the parameters Sigma, Low, and High for lines_gauss from the maximum width and the contrast of the lines to be extracted. 
void calculate_lines_gauss_parameters (HTuple hv_MaxLineWidth, HTuple hv_Contrast, 
    HTuple *hv_Sigma, HTuple *hv_Low, HTuple *hv_High)
{

  // Local iconic variables

  // Local control variables
  HTuple  hv_ContrastHigh, hv_ContrastLow, hv_HalfWidth;
  HTuple  hv_Help;

  //Check control parameters
  if (0 != ((hv_MaxLineWidth.TupleLength())!=1))
  {
    throw HException("Wrong number of values of control parameter: 1");
  }
  if (0 != ((hv_MaxLineWidth.TupleIsNumber()).TupleNot()))
  {
    throw HException("Wrong type of control parameter: 1");
  }
  if (0 != (hv_MaxLineWidth<=0))
  {
    throw HException("Wrong value of control parameter: 1");
  }
  if (0 != (HTuple((hv_Contrast.TupleLength())!=1).TupleAnd((hv_Contrast.TupleLength())!=2)))
  {
    throw HException("Wrong number of values of control parameter: 2");
  }
  if (0 != (((hv_Contrast.TupleIsNumber()).TupleMin())==0))
  {
    throw HException("Wrong type of control parameter: 2");
  }
  //Set and check ContrastHigh
  hv_ContrastHigh = ((const HTuple&)hv_Contrast)[0];
  if (0 != (hv_ContrastHigh<0))
  {
    throw HException("Wrong value of control parameter: 2");
  }
  //Set or derive ContrastLow
  if (0 != ((hv_Contrast.TupleLength())==2))
  {
    hv_ContrastLow = ((const HTuple&)hv_Contrast)[1];
  }
  else
  {
    hv_ContrastLow = hv_ContrastHigh/3.0;
  }
  //Check ContrastLow
  if (0 != (hv_ContrastLow<0))
  {
    throw HException("Wrong value of control parameter: 2");
  }
  if (0 != (hv_ContrastLow>hv_ContrastHigh))
  {
    throw HException("Wrong value of control parameter: 2");
  }
  //
  //Calculate the parameters Sigma, Low, and High for lines_gauss
  if (0 != (hv_MaxLineWidth<(HTuple(3.0).TupleSqrt())))
  {
    //Note that LineWidthMax < sqrt(3.0) would result in a Sigma < 0.5,
    //which does not make any sense, because the corresponding smoothing
    //filter mask would be of size 1x1.
    //To avoid this, LineWidthMax is restricted to values greater or equal
    //to sqrt(3.0) and the contrast values are adapted to reflect the fact
    //that lines that are thinner than sqrt(3.0) pixels have a lower contrast
    //in the smoothed image (compared to lines that are sqrt(3.0) pixels wide).
    hv_ContrastLow = (hv_ContrastLow*hv_MaxLineWidth)/(HTuple(3.0).TupleSqrt());
    hv_ContrastHigh = (hv_ContrastHigh*hv_MaxLineWidth)/(HTuple(3.0).TupleSqrt());
    hv_MaxLineWidth = HTuple(3.0).TupleSqrt();
  }
  //Convert LineWidthMax and the given contrast values into the input parameters
  //Sigma, Low, and High required by lines_gauss
  hv_HalfWidth = hv_MaxLineWidth/2.0;
  (*hv_Sigma) = hv_HalfWidth/(HTuple(3.0).TupleSqrt());
  hv_Help = ((-2.0*hv_HalfWidth)/((HTuple(6.283185307178).TupleSqrt())*((*hv_Sigma).TuplePow(3.0))))*((-0.5*((hv_HalfWidth/(*hv_Sigma)).TuplePow(2.0))).TupleExp());
  (*hv_High) = (hv_ContrastHigh*hv_Help).TupleFabs();
  (*hv_Low) = (hv_ContrastLow*hv_Help).TupleFabs();
  return;
}
