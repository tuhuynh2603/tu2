///////////////////////////////////////////////////////////////////////////////
// File generated by HDevelop for HALCON/C++ Version 13.0.2.2
///////////////////////////////////////////////////////////////////////////////




#ifndef __APPLE__
#  include "HalconCpp.h"
#  include "HDevThread.h"
#else
#  ifndef HC_LARGE_IMAGES
#    include <HALCONCpp/HalconCpp.h>
#    include <HALCONCpp/HDevThread.h>
#  else
#    include <HALCONCppxl/HalconCpp.h>
#    include <HALCONCppxl/HDevThread.h>
#  endif
#endif



using namespace HalconCpp;


// Chapter: 3D Object Model / Transformations
// Short Description: Transform 3D points from images to a 3D object model, and add extended attributes to the points of the object model. 
void xyz_attrib_to_object_model_3d (HObject ho_X, HObject ho_Y, HObject ho_Z, HObject ho_AttribImage, 
    HTuple hv_AttribName, HTuple *hv_ObjectModel3D)
{

  // Local iconic variables
  HObject  ho_DomainX, ho_DomainY, ho_DomainZ, ho_RegionIntersectionTmp;
  HObject  ho_RegionIntersection, ho_Channel;

  // Local control variables
  HTuple  hv_Number, hv_Channels, hv_WidthX, hv_HeightX;
  HTuple  hv_WidthY, hv_HeightY, hv_WidthZ, hv_HeightZ, hv_WidthA;
  HTuple  hv_HeightA, hv_AvailableAttributes, hv_Selection;
  HTuple  hv_Difference, hv_InvalidParameters, hv_Exception;
  HTuple  hv_AttribValues, hv_Index, hv_Rows, hv_Columns;
  HTuple  hv_AttribValuesTmp;

  //
  //Consistency checks:
  CountObj(ho_AttribImage, &hv_Number);
  if (0 != (hv_Number!=1))
  {
    throw HException(HTuple("The attribute image must be an image array with exactly one object. If you want to set multiple attributes, use a multichannel image."));
  }
  //
  CountChannels(ho_AttribImage, &hv_Channels);
  if (0 != (hv_Channels!=(hv_AttribName.TupleLength())))
  {
    throw HException(((("The number of channels of the attribute image ("+hv_Channels)+") must be equal to the number of attribute names (")+(hv_AttribName.TupleLength()))+").");
  }
  //
  GetImageSize(ho_X, &hv_WidthX, &hv_HeightX);
  GetImageSize(ho_Y, &hv_WidthY, &hv_HeightY);
  GetImageSize(ho_Z, &hv_WidthZ, &hv_HeightZ);
  GetImageSize(ho_AttribImage, &hv_WidthA, &hv_HeightA);
  if (0 != (HTuple(HTuple(HTuple(HTuple(HTuple(hv_WidthX!=hv_WidthY).TupleOr(hv_HeightX!=hv_HeightY)).TupleOr(hv_WidthX!=hv_WidthZ)).TupleOr(hv_HeightX!=hv_HeightZ)).TupleOr(hv_WidthX!=hv_WidthA)).TupleOr(hv_HeightX!=hv_HeightA)))
  {
    throw HException("Image sizes do not match. The size of all input images must be equal.");
  }
  //
  GetParamInfo("set_object_model_3d_attrib_mod", "AttribName", "value_list", &hv_AvailableAttributes);
  TupleRegexpSelect(hv_AvailableAttributes, "point_.*", &hv_Selection);
  TupleDifference(hv_AttribName, hv_Selection, &hv_Difference);
  TupleRegexpSelect(hv_Difference, "^[^&]", &hv_InvalidParameters);
  if (0 != ((hv_InvalidParameters.TupleLength())>0))
  {
    hv_Exception = ((("The following attribute names are invalid: "+((hv_InvalidParameters+HTuple(", ")).TupleSum()))+HTuple("please use a '&' prefix for extended attributes, e.g., '&"))+HTuple(hv_InvalidParameters[0]))+HTuple("', or a standard point attribute.");
    throw HException(hv_Exception);
  }
  //
  //Get the domain of the images containing the 3D points and get the region all
  //three of them share. This is because xyz_to_object_model_3d only uses points
  //in the intersecting domains of all three images.
  GetDomain(ho_X, &ho_DomainX);
  GetDomain(ho_Y, &ho_DomainY);
  GetDomain(ho_Z, &ho_DomainZ);
  Intersection(ho_DomainX, ho_DomainY, &ho_RegionIntersectionTmp);
  Intersection(ho_RegionIntersectionTmp, ho_DomainZ, &ho_RegionIntersection);
  //
  //Transform the images that contain the X, Y, and Z-coordinates to a 3D object model.
  XyzToObjectModel3d(ho_X, ho_Y, ho_Z, &(*hv_ObjectModel3D));
  //
  //Loop through all channels and collect the cooresponding attribute values
  hv_AttribValues = HTuple();
  {
  HTuple end_val43 = hv_Channels;
  HTuple step_val43 = 1;
  for (hv_Index=1; hv_Index.Continue(end_val43, step_val43); hv_Index += step_val43)
  {
    AccessChannel(ho_AttribImage, &ho_Channel, hv_Index);
    GetRegionPoints(ho_RegionIntersection, &hv_Rows, &hv_Columns);
    GetGrayval(ho_Channel, hv_Rows, hv_Columns, &hv_AttribValuesTmp);
    hv_AttribValues = hv_AttribValues.TupleConcat(hv_AttribValuesTmp);
  }
  }
  //
  //Set the attributes
  SetObjectModel3dAttribMod((*hv_ObjectModel3D), hv_AttribName, "points", hv_AttribValues);
  return;
}
