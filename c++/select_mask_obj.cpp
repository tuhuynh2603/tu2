///////////////////////////////////////////////////////////////////////////////
// File generated by HDevelop for HALCON/C++ Version 13.0.2.2
///////////////////////////////////////////////////////////////////////////////




#ifndef __APPLE__
#  include "HalconCpp.h"
#  include "HDevThread.h"
#else
#  ifndef HC_LARGE_IMAGES
#    include <HALCONCpp/HalconCpp.h>
#    include <HALCONCpp/HDevThread.h>
#  else
#    include <HALCONCppxl/HalconCpp.h>
#    include <HALCONCppxl/HDevThread.h>
#  endif
#endif



using namespace HalconCpp;


// Chapter: Object / Manipulation
// Short Description: Select elements from object arrays using a mask. 
void select_mask_obj (HObject ho_Objects, HObject *ho_SelectedObjects, HTuple hv_Mask)
{

  // Local iconic variables

  // Local control variables
  HTuple  hv_Number, hv_AllNumbers, hv_Indices;

  //select_mask_obj selects one or more single elements of the object array
  //Objects and returns them in SelectedObjects.
  //The elements of Mask determine if the corresponding elements of Objects are selected.
  //If the value is greater than 0, the corresponding element is selected.
  //
  //Check number of elements
  CountObj(ho_Objects, &hv_Number);
  if (0 != (hv_Number!=(hv_Mask.TupleLength())))
  {
    throw HException("Number of elements in Objects and Mask do not match.");
  }
  //
  //Check type of mask elements
  hv_AllNumbers = (((hv_Mask.TupleIsRealElem()).TupleSum())+((hv_Mask.TupleIsIntElem()).TupleSum()))==(hv_Mask.TupleLength());
  if (0 != (HTuple(hv_AllNumbers.TupleNot()).TupleAnd(hv_Mask!=HTuple())))
  {
    throw HException("Invalid type: Elements of Mask must be integer or real numbers.");
  }
  //
  //Use select_mask for tuples to generate a list of object indices.
  hv_Indices = HTuple::TupleGenSequence(1,hv_Mask.TupleLength(),1).TupleSelectMask(hv_Mask);
  SelectObj(ho_Objects, &(*ho_SelectedObjects), hv_Indices);
  return;
}
